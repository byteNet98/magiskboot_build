name: CI
on:
  workflow_dispatch:
    inputs:
      debug-build:
        type: boolean
        description: "Build in debug mode instead of release"
      full-lto:
        type: boolean
        description: "Whether to enable full LTO"

  push:
    branches-ignore:
      - main
    paths-ignore:
      - '.github/workflows/release.yaml'
      - '.github/ISSUE_TEMPLATE/**'
      - 'patches-contrib/**'
      - 'LICENSE'
      - '**/*.md'
      - 'README.md'

  pull_request:
    paths-ignore:
      - '.github/workflows/release.yaml'
      - '.github/__release_template.txt'
      - 'patches-contrib/**'
      - 'LICENSE'
      - '**/*.md'
      - 'README.md'

env:
  progname: "magiskboot"

permissions:
  contents: read

jobs:
  vars:
    name: Prepare (variables)
    runs-on: ubuntu-latest
    permissions:
      contents: none
    outputs:
      short_sha: ${{ steps.get_short_sha.outputs.SHORT_SHA }}
      cmake_build_type: ${{ steps.detect_build_type.outputs.CMAKE_BUILD_TYPE }}
      build_type: ${{ steps.detect_build_type.outputs.BUILD_TYPE }}
      full_lto: ${{ steps.determine_lto_type.outputs.FULL_LTO }}
      lto_ldflags: ${{ steps.determine_lto_type.outputs.LTO_LDFLAGS }}

    steps:
      - name: Determine short Git commit SHA
        id: get_short_sha
        run: |
          echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c 1-7`" | tee -a $GITHUB_OUTPUT

      - name: Detect build types
        id: detect_build_type
        run: |
          CMAKE_BUILD_TYPE=Release
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ github.event.inputs.debug-build }}" == "true" ]]; then
              CMAKE_BUILD_TYPE=Debug
            fi
          fi
          echo "CMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}" | tee -a $GITHUB_OUTPUT
          echo "BUILD_TYPE=${CMAKE_BUILD_TYPE,,}" | tee -a $GITHUB_OUTPUT

      - name: Determine LTO type
        id: determine_lto_type
        run: |
          FULL_LTO=OFF
          LTO_LDFLAGS=""
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ github.event.inputs.full-lto }}" == "true" ]]; then
              FULL_LTO=ON
              LTO_LDFLAGS="-flto"
            fi
          fi
          echo "FULL_LTO=${FULL_LTO}" | tee -a $GITHUB_OUTPUT
          echo "LTO_LDFLAGS=${LTO_LDFLAGS}" | tee -a $GITHUB_OUTPUT

  src:
    name: Prepare (source)
    runs-on: ubuntu-latest
    steps:
      - name: Prepare
        run: |
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends --no-install-suggests patch cmake ninja-build

      - name: Prepare (Git)
        run: |
          git config --global user.email "user@example.com"
          git config --global user.name "Example user"

      - name: Prepare (checkout)
        uses: actions/checkout@v4

      - name: Package source
        run: |
          CC=true cmake -B build -G Ninja -DCMAKE_C_COMPILER_WORKS=YES -DWITHOUT_BUILD=ON
          cmake --build build -t package_source -v

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: srcpkg
          if-no-files-found: error
          path: ${{ github.workspace }}/build/magiskboot_*-src.tar.xz

  build-windows-cross:
    name: Build (Windows) (Cross)
    runs-on: ubuntu-latest
    permissions:
      actions: write
    needs: [vars]
    strategy:
      matrix:
        include:
          - crt: msvcrt
            upload_suffix: "i686-standalone"
            cmake_arch: x86
            cc: i686-w64-mingw32-clang
            cxx: i686-w64-mingw32-clang++
            strip: i686-w64-mingw32-strip
            vcpkg_triplet: x86-mingw-static
            rust_target: i686-pc-windows-gnu
            build_rust_std: "OFF"
    env:
      toolchain_url: https://github.com/mstorsjo/llvm-mingw/releases/download
      toolchain_ver: 20240404
      upload_prefix: "windows-mingw-w64"

    steps:
      - name: Prepare (Host)
        run: |
          sudo apt update
          sudo DEBIAN_FRONTEND=noninteractive apt install -y curl wget tar file \
                                        build-essential pkg-config cmake ninja-build

      - name: Cache (LLVM MinGW)
        id: cache-llvm-mingw
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/${{ env.progname }}-llvm-mingw
          key: llvm-mingw-${{ env.toolchain_ver }}-${{ matrix.crt }}-${{ runner.os }}

      - name: Prepare (LLVM MinGW)
        if: steps.cache-llvm-mingw.outputs.cache-hit != 'true'
        run: |
          rm -rf ${{ env.progname }}-llvm-mingw.tar.xz $GITHUB_WORKSPACE/${{ env.progname }}-llvm-mingw
          wget ${{ env.toolchain_url }}/${{ env.toolchain_ver }}/llvm-mingw-${{ env.toolchain_ver }}-${{ matrix.crt }}-ubuntu-20.04-x86_64.tar.xz \
                -O ${{ env.progname }}-llvm-mingw.tar.xz
          mkdir -p $GITHUB_WORKSPACE/${{ env.progname }}-llvm-mingw
          tar -x -f ${{ env.progname }}-llvm-mingw.tar.xz -C $GITHUB_WORKSPACE/${{ env.progname }}-llvm-mingw --strip-components=1
          rm -f ${{ env.progname }}-llvm-mingw.tar.xz

      - name: Prepare (PATH)
        run: |
          echo "$GITHUB_WORKSPACE/${{ env.progname }}-llvm-mingw/bin" | tee -a $GITHUB_PATH

      - name: Prepare (Environment)
        run: |
          echo "vcpkg_root=$VCPKG_INSTALLATION_ROOT" | tee -a $GITHUB_ENV

      - name: Cache (Cross)
        id: cache-cross-vcpkgs
        uses: actions/cache@v4
        with:
          path: ${{ env.vcpkg_root }}/installed
          key: cross-vcpkgs-v2-${{ matrix.vcpkg_triplet }}-llvm-mingw-${{ env.toolchain_ver }}-${{ matrix.crt }}

      - name: Prepare (Cross)
        run: |
          vcpkg install --host-triplet=${{ matrix.vcpkg_triplet }} zlib liblzma lz4 'bzip2[core]'

      - name: Prepare (Rust)
        if: matrix.build_rust_std == 'OFF'
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain 1.77.2

      - name: Prepare (Nightly Rust)
        if: matrix.build_rust_std == 'ON'
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain nightly

      - name: Prepare (Rust STD)
        if: matrix.build_rust_std == 'OFF'
        run: |
          . "$HOME/.cargo/env"
          rustup target add ${{ matrix.rust_target }}

      - name: Prepare (Rust source)
        if: matrix.build_rust_std == 'ON'
        run: |
          . "$HOME/.cargo/env"
          rustup component add rust-src

      - name: Synchronize (source)
        uses: yogeshlonkar/wait-for-jobs@v0.2.1
        with:
          jobs: 'Prepare (source)'

      - name: Prepare (source)
        uses: actions/download-artifact@v4
        with:
          name: srcpkg

      - name: Build
        run: |
          echo -e "\n### extract source ###\n"
          tar -xf magiskboot_*-src.tar.xz

          cd magiskboot_*-src/

          echo -e "\n### configure ###\n"
          . "$HOME/.cargo/env"
          CC=${{ matrix.cc }} CXX=${{ matrix.cxx }} cmake -G Ninja -B build -DCMAKE_BUILD_TYPE=${{ needs.vars.outputs.cmake_build_type }} \
                    -DCMAKE_SYSTEM_PROCESSOR=${{ matrix.cmake_arch }} -DCMAKE_SYSTEM_NAME=Windows \
                    -DCMAKE_EXE_LINKER_FLAGS=" ${{ matrix.ldlibs }} ${{ needs.vars.outputs.lto_ldflags }}" \
                    -DRust_CARGO_TARGET=${{ matrix.rust_target }} -DRUST_BUILD_STD=${{ matrix.build_rust_std }} -DPREFER_STATIC_LINKING=ON \
                    -DCMAKE_TOOLCHAIN_FILE=$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake \
                    -DVCPKG_TARGET_TRIPLET=${{ matrix.vcpkg_triplet }} -DMINGW=TRUE \
                    -DFULL_RUST_LTO=${{ needs.vars.outputs.full_lto }}

          echo -e "\n### build ###\n"
          cmake --build build -j $(nproc) -v
          ${{ matrix.strip }} build/magiskboot*.exe

          file build/magiskboot*.exe
          strings build/magiskboot*.exe | grep -iE '^(\w|[-.])*\.dll$'
          rm -rf $GITHUB_WORKSPACE/${{ env.progname }}-out && mkdir -p $GITHUB_WORKSPACE/${{ env.progname }}-out
          cp -afv build/magiskboot*.exe $GITHUB_WORKSPACE/${{ env.progname }}-out

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: ${{ env.progname }}-${{ needs.vars.outputs.short_sha }}-${{ needs.vars.outputs.build_type }}-${{ env.upload_prefix }}-${{ matrix.crt }}-${{ matrix.upload_suffix }}
          path: ${{ github.workspace }}/${{ env.progname }}-out/magiskboot*.exe

      # Fail fast
      - name: Cancel other jobs
        if: failure()
        uses: andymckay/cancel-action@0.4