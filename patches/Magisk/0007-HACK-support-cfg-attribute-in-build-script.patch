From b6f6e76b8586065ca5f706605a94b17fc3c7844f Mon Sep 17 00:00:00 2001
From: Ookiineko <chiisaineko@protonmail.com>
Date: Fri, 28 Jul 2023 08:57:59 +0800
Subject: [PATCH] HACK: support cfg attribute in build script

Signed-off-by: Ookiineko <chiisaineko@protonmail.com>
---
 native/src/external/cxx-rs/gen/src/cfg.rs | 25 +++++++++++++++++++++----
 1 file changed, 21 insertions(+), 4 deletions(-)

diff --git a/native/src/external/cxx-rs/gen/src/cfg.rs b/native/src/external/cxx-rs/gen/src/cfg.rs
index da589085..fd3d2542 100644
--- a/native/src/external/cxx-rs/gen/src/cfg.rs
+++ b/native/src/external/cxx-rs/gen/src/cfg.rs
@@ -5,15 +5,32 @@ use crate::syntax::Api;
 use quote::quote;
 use std::collections::BTreeSet as Set;
 use syn::{Error, LitStr};
+use std::env;
 
 pub(super) struct UnsupportedCfgEvaluator;
 
 impl CfgEvaluator for UnsupportedCfgEvaluator {
     fn eval(&self, name: &str, value: Option<&str>) -> CfgResult {
-        let _ = name;
-        let _ = value;
+        if name == "target_os" {
+            if let Ok(target_os_value) = env::var("CXXBRIDGE_GEN_TARGET_OS") {
+                if let Some(value) = value {
+                    if target_os_value == value {
+                        CfgResult::True
+                    } else {
+                        CfgResult::False
+                    }
+                } else {
+                    let msg = "specify the value for the 'target_os' cfg attribute";
+                    CfgResult::Undetermined { msg: msg.to_owned() }
+                }
+            } else {
+                let msg = "set the environment variable 'CXXBRIDGE_GEN_TARGET_OS' to use this attribute";
+                CfgResult::Undetermined { msg: msg.to_owned() }
+            }
+        } else {
         let msg = "cfg attribute is not supported".to_owned();
         CfgResult::Undetermined { msg }
+        }
     }
 }
 
-- 
2.41.0

