diff --git a/native/src/boot/cpio.rs b/native/src/boot/cpio.rs
index d19ce29..0e36b4d 100644
--- a/native/src/boot/cpio.rs
+++ b/native/src/boot/cpio.rs
@@ -353,7 +353,7 @@ impl Cpio {
                 FsPath::from(&buf).symlink_to(out)?;
             }
             S_IFBLK | S_IFCHR => {
-                let dev = makedev(entry.rdevmajor.try_into()?, entry.rdevminor.try_into()?);
+                let dev = unsafe { makedev(entry.rdevmajor.try_into()?, entry.rdevminor.try_into()?) };
                 unsafe { mknod(out.as_ptr().cast(), entry.mode, dev) };
             }
             _ => {
diff --git a/native/src/base/files.rs b/native/src/base/files.rs
index 6582eee..8678392 100644
--- a/native/src/base/files.rs
+++ b/native/src/base/files.rs
@@ -206,7 +206,7 @@ impl FileAttr {
     #[inline(always)]
     #[allow(clippy::unnecessary_cast)]
     fn is(&self, mode: mode_t) -> bool {
-        (self.st.st_mode & libc::S_IFMT as u32) as mode_t == mode
+        ((self.st.st_mode as mode_t) & libc::S_IFMT) == mode
     }
 
     pub fn is_dir(&self) -> bool {
diff --git a/native/src/boot/bootimg.cpp b/native/src/boot/bootimg.cpp
index f853e61..1f6b2dc 100644
--- a/native/src/boot/bootimg.cpp
+++ b/native/src/boot/bootimg.cpp
@@ -16,6 +16,23 @@
 
 using namespace std;
 
+// refs: https://github.com/AcademySoftwareFoundation/Imath/pull/350
+//       https://stackoverflow.com/questions/67521312/safe-equivalent-of-stdbit-cast-in-c11
+#if !defined(__cpp_lib_bit_cast) || __cpp_lib_bit_cast < 201806L
+template <class T2, class T1>
+constexpr T2 cpp11_bit_cast(T1 t1) {
+  static_assert(sizeof(T1)==sizeof(T2), "Types must match sizes");
+  static_assert(std::is_pod<T1>::value, "Requires POD input");
+  static_assert(std::is_pod<T2>::value, "Requires POD output");
+
+  T2 t2;
+  std::memcpy( std::addressof(t2), std::addressof(t1), sizeof(T1) );
+  return t2;
+}
+
+#define bit_cast cpp11_bit_cast
+#endif
+
 #define PADDING 15
 #define SHA256_DIGEST_SIZE 32
 #define SHA_DIGEST_SIZE 20
