From b7679531f5dfd3132ff79095fb6edda862ab0939 Mon Sep 17 00:00:00 2001
From: Ookiineko <chiisaineko@protonmail.com>
Date: Fri, 17 Nov 2023 17:17:43 +0800
Subject: [PATCH] implement MAP_PRIVATE using copy on write protection

Signed-off-by: Ookiineko <chiisaineko@protonmail.com>
---
 mman.c | 35 ++++++++++++++++++++++-------------
 mman.h |  2 +-
 2 files changed, 23 insertions(+), 14 deletions(-)

diff --git a/mman.c b/mman.c
index 97b0408..6e7f5d6 100644
--- a/mman.c
+++ b/mman.c
@@ -2,6 +2,7 @@
 #include <windows.h>
 #include <errno.h>
 #include <io.h>
+#include <stdbool.h>
 
 #include "mman.h"
 
@@ -22,7 +23,7 @@ static int __map_mman_error(const DWORD err, const int deferr)
 }
 #endif
 
-static DWORD __map_mmap_prot_page(const int prot)
+static DWORD __map_mmap_prot_page(const int prot, const int flags)
 {
     DWORD protect = 0;
     
@@ -32,29 +33,36 @@ static DWORD __map_mmap_prot_page(const int prot)
     if ((prot & PROT_EXEC) != 0)
     {
         protect = ((prot & PROT_WRITE) != 0) ? 
-                    PAGE_EXECUTE_READWRITE : PAGE_EXECUTE_READ;
+                    (((flags & MAP_PRIVATE) != 0) ? PAGE_EXECUTE_WRITECOPY : PAGE_EXECUTE_READWRITE) : PAGE_EXECUTE_READ;
     }
     else
     {
         protect = ((prot & PROT_WRITE) != 0) ?
-                    PAGE_READWRITE : PAGE_READONLY;
+                    (((flags & MAP_PRIVATE) != 0) ? PAGE_WRITECOPY : PAGE_READWRITE) : PAGE_READONLY;
     }
     
     return protect;
 }
 
-static DWORD __map_mmap_prot_file(const int prot)
+static DWORD __map_mmap_prot_file(const int prot, const int flags)
 {
     DWORD desiredAccess = 0;
     
     if (prot == PROT_NONE)
         return desiredAccess;
-        
-    if ((prot & PROT_READ) != 0)
+    
+    bool map_read = (prot & PROT_READ) != 0;
+    bool map_write = (prot & PROT_WRITE) != 0;
+    bool map_exec = (prot & PROT_EXEC) != 0;
+    bool map_private = (flags & MAP_PRIVATE) != 0;
+    bool map_copy = map_write && map_private;
+    
+    // ref: https://stackoverflow.com/questions/55018806/copy-on-write-file-mapping-on-windows
+    if (map_read && !map_copy)
         desiredAccess |= FILE_MAP_READ;
-    if ((prot & PROT_WRITE) != 0)
-        desiredAccess |= FILE_MAP_WRITE;
-    if ((prot & PROT_EXEC) != 0)
+    if (map_write)
+        desiredAccess |= map_private ? FILE_MAP_COPY : FILE_MAP_WRITE;
+    if (map_exec)
         desiredAccess |= FILE_MAP_EXECUTE;
     
     return desiredAccess;
@@ -75,8 +83,8 @@ void* mmap(void *addr, size_t len, int prot, int flags, int fildes, OffsetType o
                     (DWORD)off : (DWORD)(off & 0xFFFFFFFFL);
     const DWORD dwFileOffsetHigh = (sizeof(OffsetType) <= sizeof(DWORD)) ?
                     (DWORD)0 : (DWORD)((off >> 32) & 0xFFFFFFFFL);
-    const DWORD protect = __map_mmap_prot_page(prot);
-    const DWORD desiredAccess = __map_mmap_prot_file(prot);
+    const DWORD protect = __map_mmap_prot_page(prot, flags);
+    const DWORD desiredAccess = __map_mmap_prot_file(prot, flags);
 
     const OffsetType maxSize = off + (OffsetType)len;
 
@@ -158,9 +166,10 @@ int munmap(void *addr, size_t len)
     return -1;
 }
 
-int _mprotect(void *addr, size_t len, int prot)
+// TODO: not portable, use VirtualQuery to get old protection instead
+int _mprotect_np(void *addr, size_t len, int prot, int map_flags)
 {
-    DWORD newProtect = __map_mmap_prot_page(prot);
+    DWORD newProtect = __map_mmap_prot_page(prot, map_flags);
     DWORD oldProtect = 0;
     
     if (VirtualProtect(addr, len, newProtect, &oldProtect))
diff --git a/mman.h b/mman.h
index 047d3a0..ac0ce2b 100644
--- a/mman.h
+++ b/mman.h
@@ -64,7 +64,7 @@ extern "C" {
 
 MMANSHARED_EXPORT void*   mmap(void *addr, size_t len, int prot, int flags, int fildes, OffsetType off);
 MMANSHARED_EXPORT int     munmap(void *addr, size_t len);
-MMANSHARED_EXPORT int     _mprotect(void *addr, size_t len, int prot);
+MMANSHARED_EXPORT int     _mprotect_np(void *addr, size_t len, int prot, int map_flags);
 MMANSHARED_EXPORT int     msync(void *addr, size_t len, int flags);
 MMANSHARED_EXPORT int     mlock(const void *addr, size_t len);
 MMANSHARED_EXPORT int     munlock(const void *addr, size_t len);
-- 
2.42.0

